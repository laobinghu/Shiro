import{Commands as o,subsetToBinary as m}from"./subset-shared.chunk-DeevQ3gz.js";import"./index-YMUjaDx4.js";import"./index-CaQNHPqR.js";import"./floating-ui.react-dom-DtNc5yOO.js";import"./index-DknxroSg.js";import"./owner-EYyAWlgp.js";import"./index-D9cSuHcM.js";import"./useQuery-CaZMl5Q8.js";import"./viewport-CmXhBg3S.js";import"./use-is-dark-CZw0E0it.js";import"./dom-BowoBODo.js";import"./helper-CB7ordUq.js";import"./lodash-Dv8b12-_.js";import"./StyledButton-Sm4mkRH1.js";import"./index-BZQyBDE5.js";import"./proxy-BY0eS7VU.js";import"./provider-ttcw9hgE.js";import"./spring-C80N1tKa.js";import"./use-is-unmounted-CQcoZtgO.js";import"./use-event-callback-D-ihFmfO.js";import"./use-drag-controls-wDZLQxOI.js";import"./visual-element-BWPUV8Sy.js";import"./index-CbtsY2H5.js";var M=import.meta.url?new URL(import.meta.url):void 0;typeof window>"u"&&typeof self<"u"&&(self.onmessage=async t=>{switch(t.data.command){case o.Subset:let r=await m(t.data.arrayBuffer,t.data.codePoints);self.postMessage(r,{transfer:[r]});break}});export{M as WorkerUrl};
